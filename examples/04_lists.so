// Soplang Lists // This file demonstrates list operations in Soplang // ==  == = LIST CREATION ==  == = qor(" ==  == = LIST CREATION ==  == = ") // Dynamic list declaration

door sharafdin_skills = ["Python", "JavaScript", "TypeScript", "Soplang"]
qor("Sharafdin's skills: " + qoraal(sharafdin_skills))
// Static list declaration with liis type

liis grades = [85, 92, 78, 95, 88]
qor("Sharafdin's grades: " + qoraal(grades))
// Empty list

door empty_list = []
qor("Empty list: " + qoraal(empty_list))
// List with mixed types (only allowed with door)

door sharafdin_data = ["Sharafdin", 28, true, 5000.50]
qor("Sharafdin's data (mixed types): " + qoraal(sharafdin_data))
// List with expressions

door calculations = [5 + 10, 20 * 2, 100 / 4, 15 % 4]
qor("List with calculations: " + qoraal(calculations))
qor("")
// Empty line // ==  == = NESTED LISTS ==  == = qor("\n ==  == = NESTED LISTS ==  == = ") // Nested lists

door sharafdin_education = [
["Bachelor's", "Computer Science", 2015, 3.8], ["Master's", "Software Engineering", 2018, 4.0]
]

qor("Sharafdin's education:")
qor("1. " + sharafdin_education[0][0] + " - " + sharafdin_education[0][1] + " (" + qoraal(sharafdin_education[0][2]) + "), GPA: " + qoraal(sharafdin_education[0][3]))
qor("2. " + sharafdin_education[1][0] + " - " + sharafdin_education[1][1] + " (" + qoraal(sharafdin_education[1][2]) + "), GPA: " + qoraal(sharafdin_education[1][3]))
// Deeply nested lists

door sharafdin_family = [
"Sharafdin", ["Ahmed", "Mohamed", "Ali"],
// Brothers

[
["Hassan", "Fatima"],
// Cousins 1

["Aisha", "Omar"]
// Cousins 2

]
]

qor("\nSharafdin's family:")
qor("Himself: " + sharafdin_family[0])
qor("Brothers: " + qoraal(sharafdin_family[1]))
qor("First uncle's children: " + qoraal(sharafdin_family[2][0]))
qor("Second uncle's children: " + qoraal(sharafdin_family[2][1]))
qor("")
// Empty line // ==  == = LIST OPERATIONS ==  == = qor("\n ==  == = LIST OPERATIONS ==  == = ") // Accessing list elements

door cities = ["Mogadishu", "Hargeisa", "Kismayo", "Berbera", "Bosaso"]
qor("Cities: " + qoraal(cities))
qor("First city: " + cities[0])
qor("Last city: " + cities[cities.length() - 1])
// Modifying list elements

cities[1] = "Garowe"
qor("\nAfter modification: " + qoraal(cities))
// ==  == = LIST METHODS ==  == = qor("\n ==  == = LIST METHODS ==  == = ") // Length of a list

door num_cities = cities.length()
qor("Number of cities: " + qoraal(num_cities))
// Push - Add item to the end

cities.push("Borama")
qor("\nAfter push: " + qoraal(cities))
// Pop - Remove and return the last item

door last_city = cities.pop()
qor("Removed city: " + last_city)
qor("After pop: " + qoraal(cities))
// Includes - Check if list includes an item

door does_include = cities.includes("Kismayo")
qor("\nDoes the list include 'Kismayo'? " + qoraal(does_include))

door does_not_include = cities.includes("Djibouti")
qor("Does the list include 'Djibouti'? " + qoraal(does_not_include))
// Join - Combine list elements into a string

door cities_joined = cities.join(", ")
qor("\nCities joined: " + cities_joined)
// Concat - Combine two lists

door more_cities = ["Baidoa", "Beledweyne"]
door combined_cities = cities.concat(more_cities)
qor("\nCombined cities: " + qoraal(combined_cities))
qor("")
// Empty line // ==  == = LIST TRAVERSAL ==  == = qor("\n ==  == = LIST TRAVERSAL ==  == = ") // Looping through a list

qor("Sharafdin's skills:")
ku_celi i min 0 ilaa sharafdin_skills.length() - 1 {
    qor((i + 1) + ". " + sharafdin_skills[i])
}
// Finding the highest score

door highest_grade = grades[0]
ku_celi i min 1 ilaa grades.length() - 1 {
    haddii (grades[i] > highest_grade) {
        highest_grade = grades[i]
    }
}

qor("\nSharafdin's highest grade: " + qoraal(highest_grade))
// Sum of all scores

door total_grades = 0
ku_celi i min 0 ilaa grades.length() - 1 {
    total_grades = total_grades + grades[i]
}

qor("Total of grades: " + qoraal(total_grades))
qor("Average of grades: " + qoraal(total_grades / grades.length()))
qor("")
// Empty line // ==  == = LIST FILTERING ==  == = qor("\n ==  == = LIST FILTERING ==  == = ") // Filter grades above 85

door good_grades = []
ku_celi i min 0 ilaa grades.length() - 1 {
    haddii (grades[i] > 85) {
        good_grades.push(grades[i])
    }
}

qor("Grades above 85: " + qoraal(good_grades))
// Filter cities starting with 'M'

door m_cities = []
ku_celi i min 0 ilaa cities.length() - 1 {
    door city = cities[i]
    haddii (city[0] == "M") {
        m_cities.push(city)
    }
}

qor("Cities starting with 'M': " + qoraal(m_cities))
qor("")
// Empty line // ==  == = TYPE ENFORCEMENT ==  == = qor("\n ==  == = TYPE ENFORCEMENT ==  == = ") // Static list can only contain one type

liis numbers = [1, 2, 3, 4, 5]
qor("List of numbers: " + qoraal(numbers))
// The following would cause a type error if uncommented // numbers.push("This will cause an error")

qor("A static list can only contain values of the same type")

qor("")
// Empty line

qor(" ==  == = END OF LISTS EXAMPLE ==  == = ")