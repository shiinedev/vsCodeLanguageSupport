// Soplang Complex Data Structures and Error Handling
// This file demonstrates complex data structures and error handling in Soplang

// ===== COMPLEX DATA STRUCTURES =====
qor("===== COMPLEX DATA STRUCTURES =====")

// Complex nested structure - A university system
door university = {
    "name": "Somali National University",
    "location": "Mogadishu",
    "established": 1954,
    "studentCount": 15000,
    "faculties": [
        {
            "name": "Faculty of Computer Science",
            "departments": ["Computer Science", "Information Technology", "Artificial Intelligence"],
            "professors": [
                {
                    "name": "Dr. Sharafdin Yusuf",
                    "age": 45,
                    "courses": [
                        {
                            "code": "CS101",
                            "title": "Introduction to Programming",
                            "credits": 3,
                            "students": 120
                        },
                        {
                            "code": "CS303",
                            "title": "Advanced Algorithms",
                            "credits": 4,
                            "students": 80
                        }
                    ],
                    "publications": 28,
                    "contactInfo": {
                        "email": "sharafdin@snu.edu.so",
                        "phone": "+252612345678",
                        "office": "Building A, Room 305"
                    }
                },
                {
                    "name": "Dr. Mohamed Nur",
                    "age": 52,
                    "courses": [
                        {
                            "code": "CS205",
                            "title": "Database Systems",
                            "credits": 4,
                            "students": 95
                        }
                    ],
                    "publications": 15,
                    "contactInfo": {
                        "email": "mohamed@snu.edu.so",
                        "phone": "+252623456789",
                        "office": "Building B, Room 210"
                    }
                }
            ],
            "dean": {
                "name": "Prof. Yusuf Ali",
                "age": 58,
                "yearsInPosition": 7
            }
        },
        {
            "name": "Faculty of Medicine",
            "departments": ["General Medicine", "Surgery", "Pediatrics"],
            "professors": [
                {
                    "name": "Dr. Fawzia Hassan",
                    "age": 49,
                    "specialization": "Cardiology"
                }
            ],
            "dean": {
                "name": "Prof. Abdirahman Mohamed",
                "age": 62,
                "yearsInPosition": 10
            }
        }
    ],
    "searchProfessor": howl(name) {
        ku_celi f min 0 ilaa this.faculties.length() - 1 {
            door faculty = this.faculties[f]
            ku_celi p min 0 ilaa faculty.professors.length() - 1 {
                door professor = faculty.professors[p]
                haddii (professor.name.includes(name)) {
                    sooCeli {
                        "found": true,
                        "professor": professor,
                        "faculty": faculty.name
                    }
                }
            }
        }
        sooCeli {
            "found": false,
            "message": "Professor not found"
        }
    },
    "countCourses": howl() {
        door totalCourses = 0
        ku_celi f min 0 ilaa this.faculties.length() - 1 {
            door faculty = this.faculties[f]
            ku_celi p min 0 ilaa faculty.professors.length() - 1 {
                door professor = faculty.professors[p]
                haddii (professor.courses) {
                    totalCourses = totalCourses + professor.courses.length()
                }
            }
        }
        sooCeli totalCourses
    }
}

// ===== ACCESSING COMPLEX DATA =====
qor("\n===== ACCESSING COMPLEX DATA =====")

// Accessing basic information
qor("University name: " + university.name)
qor("Location: " + university.location)
qor("Established: " + qoraal(university.established))
qor("Student count: " + qoraal(university.studentCount))

// Accessing nested information
qor("\nNumber of faculties: " + qoraal(university.faculties.length()))
qor("First faculty name: " + university.faculties[0].name)
qor("CS departments: " + qoraal(university.faculties[0].departments))

// Accessing deeply nested information
door cs_dean = university.faculties[0].dean
qor("\nComputer Science faculty dean: " + cs_dean.name)
qor("Dean's age: " + qoraal(cs_dean.age))
qor("Years as dean: " + qoraal(cs_dean.yearsInPosition))

// First professor in CS faculty
door first_professor = university.faculties[0].professors[0]
qor("\nFirst CS professor: " + first_professor.name)
qor("Age: " + qoraal(first_professor.age))
qor("Publications: " + qoraal(first_professor.publications))

// Even deeper - Contact info
qor("\nProfessor contact info:")
qor("Email: " + first_professor.contactInfo.email)
qor("Phone: " + first_professor.contactInfo.phone)
qor("Office: " + first_professor.contactInfo.office)

// Courses taught by first professor
qor("\nCourses taught by " + first_professor.name + ":")
ku_celi i min 0 ilaa first_professor.courses.length() - 1 {
    door course = first_professor.courses[i]
    qor((i + 1) + ". " + course.code + ": " + course.title + 
        " (" + qoraal(course.credits) + " credits, " + 
        qoraal(course.students) + " students)")
}

// ===== MANIPULATING COMPLEX DATA =====
qor("\n===== MANIPULATING COMPLEX DATA =====")

// Adding a new faculty
door new_faculty = {
    "name": "Faculty of Engineering",
    "departments": ["Civil Engineering", "Electrical Engineering", "Mechanical Engineering"],
    "professors": [],
    "dean": {
        "name": "Prof. Ibrahim Omar",
        "age": 55,
        "yearsInPosition": 3
    }
}

university.faculties.push(new_faculty)
qor("Added new faculty: " + new_faculty.name)
qor("Total faculties now: " + qoraal(university.faculties.length()))

// Adding a new professor to Engineering faculty
door new_professor = {
    "name": "Dr. Amina Yusuf",
    "age": 42,
    "courses": [
        {
            "code": "CE101",
            "title": "Introduction to Civil Engineering",
            "credits": 3,
            "students": 75
        }
    ],
    "publications": 12,
    "contactInfo": {
        "email": "amina@snu.edu.so",
        "phone": "+252634567890",
        "office": "Engineering Building, Room 105"
    }
}

university.faculties[2].professors.push(new_professor)
qor("\nAdded new professor to Engineering: " + new_professor.name)
qor("Engineering faculty now has " + qoraal(university.faculties[2].professors.length()) + " professors")

// Using the search method
qor("\nSearching for 'Sharafdin':")
door search_result = university.searchProfessor("Sharafdin")
haddii (search_result.found) {
    qor("Found: " + search_result.professor.name + " in " + search_result.faculty)
    qor("Email: " + search_result.professor.contactInfo.email)
} haddii_kalena {
    qor(search_result.message)
}

qor("\nSearching for 'Ibrahim':")
search_result = university.searchProfessor("Ibrahim")
haddii (search_result.found) {
    qor("Found: " + search_result.professor.name + " in " + search_result.faculty)
} haddii_kalena {
    qor(search_result.message)
}

// Using the count method
door total_courses = university.countCourses()
qor("\nTotal courses offered across all faculties: " + qoraal(total_courses))

// ===== ERROR HANDLING =====
qor("\n===== ERROR HANDLING =====")

// Try-catch for division by zero
qor("Division by zero example:")
isku_day {
    door result = 10 / 0
    qor("Result: " + qoraal(result)) // This won't execute
} qabo error {
    qor("Error caught: " + error)
}

// Try-catch for accessing non-existent property
qor("\nAccessing non-existent property:")
isku_day {
    door nonexistent = university.rector.name
    qor("Rector: " + nonexistent) // This won't execute
} qabo error {
    qor("Error caught: " + error)
}

// Function with defensive programming
howl safeGetCourseInfo(university, facultyIndex, professorIndex, courseIndex) {
    isku_day {
        // Check if the faculty exists
        haddii (facultyIndex >= university.faculties.length()) {
            sooCeli { "error": "Faculty index out of bounds" }
        }
        
        door faculty = university.faculties[facultyIndex]
        
        // Check if the professor exists
        haddii (professorIndex >= faculty.professors.length()) {
            sooCeli { "error": "Professor index out of bounds" }
        }
        
        door professor = faculty.professors[professorIndex]
        
        // Check if the professor has courses
        haddii (!professor.courses) {
            sooCeli { "error": "Professor has no courses" }
        }
        
        // Check if the course exists
        haddii (courseIndex >= professor.courses.length()) {
            sooCeli { "error": "Course index out of bounds" }
        }
        
        door course = professor.courses[courseIndex]
        sooCeli {
            "success": true,
            "course": course,
            "professor": professor.name,
            "faculty": faculty.name
        }
    } qabo error {
        sooCeli { "error": "Unexpected error: " + error }
    }
}

// Valid course request
qor("\nGetting valid course info:")
door course_info = safeGetCourseInfo(university, 0, 0, 0)
haddii (course_info.success) {
    qor("Course: " + course_info.course.code + " - " + course_info.course.title)
    qor("Professor: " + course_info.professor)
    qor("Faculty: " + course_info.faculty)
} haddii_kalena {
    qor("Error: " + course_info.error)
}

// Invalid course request
qor("\nGetting invalid course info (out of bounds):")
course_info = safeGetCourseInfo(university, 0, 0, 5)
haddii (course_info.success) {
    qor("Course: " + course_info.course.code + " - " + course_info.course.title)
} haddii_kalena {
    qor("Error: " + course_info.error)
}

qor("") // Empty line
qor("===== END OF COMPLEX DATA EXAMPLE =====") 