// Soplang Edge Cases and Advanced Tests
// This file demonstrates edge cases and advanced programming techniques in Soplang

// ===== TYPE CASTING EDGE CASES =====
qor("===== TYPE CASTING EDGE CASES =====")

// Type conversion edge cases
qor("Boolean to Number:")
door bool_true_to_number = tiro(true)
door bool_false_to_number = tiro(false)
qor("true to number: " + qoraal(bool_true_to_number))
qor("false to number: " + qoraal(bool_false_to_number))

qor("\nEmpty string conversions:")
door empty_str_to_number = tiro("")
door empty_str_to_bool = labadaran("")
qor("Empty string to number: " + qoraal(empty_str_to_number))
qor("Empty string to boolean: " + qoraal(empty_str_to_bool))

qor("\nSpecial number conversions:")
door infinity_to_string = qoraal(1.0/0.0)
door nan_to_string = qoraal(0.0/0.0)
qor("Infinity to string: " + infinity_to_string)
qor("NaN to string: " + nan_to_string)

// Type checking edge cases
qor("\nType checking edge cases:")
qor("Type of 1/0: " + nuuc(1.0/0.0))
qor("Type of 0/0: " + nuuc(0.0/0.0))
qor("Type of empty object: " + nuuc({}))
qor("Type of empty list: " + nuuc([]))
qor("") // Empty line

// ===== LIST EDGE CASES =====
qor("\n===== LIST EDGE CASES =====")

// Nested empty lists
door nested_empty_lists = [[], [[]], [[], [[]]], []]
qor("Nested empty lists: " + qoraal(nested_empty_lists))
qor("Length of nested empty lists: " + qoraal(nested_empty_lists.length()))

// Accessing out of bounds indices
door test_list = [1, 2, 3]
qor("\nAccessing indices:")
qor("Valid index (0): " + qoraal(test_list[0]))
qor("Valid index (2): " + qoraal(test_list[2]))

isku_day {
    qor("Invalid index (3): " + qoraal(test_list[3]))
} qabo error {
    qor("Error accessing index 3: " + error)
}

isku_day {
    qor("Invalid index (-1): " + qoraal(test_list[-1]))
} qabo error {
    qor("Error accessing index -1: " + error)
}

// Empty list operations
door empty_list = []
qor("\nEmpty list operations:")
qor("Pop from empty list:")
isku_day {
    door popped = empty_list.pop()
    qor("Popped: " + qoraal(popped))
} qabo error {
    qor("Error: " + error)
}

// List with mixed types (only allowed with door)
door mixed_list = [1, "two", true, [3, 4], {"name": "Sharafdin"}]
qor("\nMixed list: " + qoraal(mixed_list))
qor("Type of mixed list: " + nuuc(mixed_list))
qor("Type of item 0: " + nuuc(mixed_list[0]))
qor("Type of item 1: " + nuuc(mixed_list[1]))
qor("Type of item 3: " + nuuc(mixed_list[3]))
qor("Type of item 4: " + nuuc(mixed_list[4]))
qor("") // Empty line

// ===== OBJECT EDGE CASES =====
qor("\n===== OBJECT EDGE CASES =====")

// Empty object
door empty_object = {}
qor("Empty object: " + qoraal(empty_object))
qor("Is empty? " + qoraal(empty_object.isEmpty()))

// Access non-existent properties
qor("\nAccessing non-existent properties:")
door test_object = {"name": "Sharafdin", "age": 28}
qor("Existing property: " + test_object.name)
qor("Non-existent property: " + qoraal(test_object.address))

// Object with special property names
door special_object = {
    "property-with-dash": "dash value",
    "property with space": "space value",
    "123": "numeric key"
}

qor("\nSpecial property names:")
qor("Dash property: " + special_object["property-with-dash"])
qor("Space property: " + special_object["property with space"])
qor("Numeric key: " + special_object["123"])

// Nested empty objects
door nested_empty_objects = {
    "empty1": {},
    "empty2": {"nested": {}}
}
qor("\nNested empty objects: " + qoraal(nested_empty_objects))
qor("") // Empty line

// ===== FUNCTION EDGE CASES =====
qor("\n===== FUNCTION EDGE CASES =====")

// Function with no return
howl no_return() {
    qor("This function doesn't return anything")
}

door result_of_no_return = no_return()
qor("Result of function with no return: " + qoraal(result_of_no_return))

// Function returning different types based on condition
howl dynamic_return(value) {
    haddii (nuuc(value) == "tiro") {
        sooCeli value * 2
    } haddii (nuuc(value) == "qoraal") {
        sooCeli "Text: " + value
    } haddiiKalena {
        sooCeli true
    }
}

qor("\nDynamic return types:")
qor("Number input: " + qoraal(dynamic_return(5)))
qor("String input: " + dynamic_return("Sharafdin"))
qor("Boolean input: " + qoraal(dynamic_return(false)))

// Recursive function with edge case
howl factorial(n) {
    haddii (n <= 0) {
        sooCeli 1  // Edge case for factorial
    }
    sooCeli n * factorial(n - 1)
}

qor("\nFactorial edge cases:")
qor("factorial(5): " + qoraal(factorial(5)))
qor("factorial(0): " + qoraal(factorial(0)))
qor("factorial(-1): " + qoraal(factorial(-1)))

// Function with maximum call stack test (commented to prevent crash)
howl recursive_danger(n) {
    haddii (n <= 0) {
        sooCeli "Base case reached"
    }
    sooCeli recursive_danger(n - 1)
}

qor("\nSafe recursive call:")
qor(recursive_danger(10))

qor("Deep recursion is commented out to prevent stack overflow")
// qor(recursive_danger(100000))  // Would cause stack overflow
qor("") // Empty line

// ===== SCOPE TESTING =====
qor("\n===== SCOPE TESTING =====")

// Global vs local scope
door global_var = "I'm global"

howl test_scope() {
    door local_var = "I'm local"
    qor("Inside function - global_var: " + global_var)
    qor("Inside function - local_var: " + local_var)
    
    // Shadowing
    door global_var = "I'm shadowing the global"
    qor("Inside function - shadowed global_var: " + global_var)
}

test_scope()
qor("\nOutside function - global_var: " + global_var)

isku_day {
    qor("Outside function - local_var: " + local_var)
} qabo error {
    qor("Error accessing local_var outside function: " + error)
}

// Nested function scope
howl outer_function() {
    door outer_var = "Outer variable"
    
    howl inner_function() {
        door inner_var = "Inner variable"
        qor("Inner function can access outer_var: " + outer_var)
        sooCeli inner_var
    }
    
    door inner_result = inner_function()
    qor("Outer function received: " + inner_result)
    
    isku_day {
        qor("Trying to access inner_var: " + inner_var)
    } qabo error {
        qor("Error accessing inner_var from outer function: " + error)
    }
}

outer_function()
qor("") // Empty line

// ===== MATHEMATICAL EDGE CASES =====
qor("\n===== MATHEMATICAL EDGE CASES =====")

qor("Division by zero:")
isku_day {
    door result = 5 / 0
    qor("Result: " + qoraal(result))
} qabo error {
    qor("Error: " + error)
}

qor("\nFloating point precision:")
door float_calc = 0.1 + 0.2
qor("0.1 + 0.2 = " + qoraal(float_calc))
qor("Is 0.1 + 0.2 equal to 0.3? " + qoraal(float_calc == 0.3))

qor("\nVery large numbers:")
door big_number = 1000000000 * 1000000000
qor("1000000000 * 1000000000 = " + qoraal(big_number))

qor("\nVery small numbers:")
door small_number = 1e-15
qor("1e-15 = " + qoraal(small_number))
qor("") // Empty line

// ===== STRING MANIPULATION EDGE CASES =====
qor("\n===== STRING MANIPULATION EDGE CASES =====")

// Empty string operations
door empty_str = ""
qor("Empty string length: " + qoraal(empty_str.length()))
qor("Empty string first character: " + qoraal(empty_str[0]))

// Escape sequences
door str_with_escapes = "Line 1\nLine 2\tTabbed\\"
qor("\nString with escape sequences:")
qor(str_with_escapes)

// Special characters
door special_chars = "Unicode: ñáéíóúü, Emoji: 🌍🚀🤖"
qor("\nSpecial characters:")
qor(special_chars)
qor("Length of special chars string: " + qoraal(special_chars.length()))
qor("") // Empty line

// ===== METHOD CHAINING EDGE CASES =====
qor("\n===== METHOD CHAINING EDGE CASES =====")

// List method chaining
door numbers = [1, 2, 3, 4, 5]
qor("Original list: " + qoraal(numbers))

// Push and pop in the same expression
door chained_result = numbers.push(6).pop()
qor("After push(6).pop(): " + qoraal(chained_result))
qor("List after chained operations: " + qoraal(numbers))

// Object method chaining
door person = {
    "name": "Sharafdin",
    "greet": howl() {
        qor("Hello, I'm " + this.name)
        sooCeli this
    },
    "sayGoodbye": howl() {
        qor("Goodbye from " + this.name)
        sooCeli this
    }
}

qor("\nObject method chaining:")
person.greet().sayGoodbye()
qor("") // Empty line

// ===== LOOP EDGE CASES =====
qor("\n===== LOOP EDGE CASES =====")

// Empty loops
qor("Empty for loop:")
kuCeli i min 1 ilaa 0 {
    qor("This should not print")
}
qor("End of empty for loop")

qor("\nEmpty while loop:")
door counter = 5
intaAy (counter < 5) {
    qor("This should not print")
    counter = counter + 1
}
qor("End of empty while loop")

// Loop with continue/break edge cases
qor("\nLoop with continue at end:")
kuCeli i min 1 ilaa 5 {
    qor("Value: " + qoraal(i))
    haddii (true) {
        siiWad
    }
    qor("This should not print")
}

qor("\nLoop with break at beginning:")
kuCeli i min 1 ilaa 5 {
    haddii (true) {
        jooji
    }
    qor("This should not print")
}
qor("") // Empty line

qor("===== END OF EDGE CASES EXAMPLE =====") 